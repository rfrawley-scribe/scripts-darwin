<?php 
/**
 *
 * HEX2DEC CONVERSION SCRIPT
 * Simple script to handle conversion of hex/dec to dec/hex HTML entities in text documents
 *
 * @author Rob Frawley <rfrawley@scribenet.com>
 * @license MIT License
 * @version 0.1.0
 *
 */

/* root and backup directories */
$root = '.' . DIRECTORY_SEPARATOR;
$backup = $root . '.backup' . DIRECTORY_SEPARATOR;

/* file extension to search for */
$ext = 'scml';

/* array of values to ignore from matches */
$ignore = array( '&#x000A;' );

/*
 * require Console IO library 
 */
require '/scripts/_lib/consoleIO';

/*
 * Go...
 */
IO::sT( 'Dec2Hex and Hex2Dec Conversion Operation' );
IO::sT( 'by Rob Frawley of Scribe Inc.' );

/* clear stat cache, make dir handles, file arrays, etc */
clearstatcache();
$dirFiles = scandir( $root );
$files = array();
$filesName = array();

/* begin console output list for file listing */
IO::sL( 'Scanning directory ' . $root . ' for extension ' . $ext );

/* loop through directory files */
foreach( $dirFiles as $i => $f )
{

	/* ignore current and parent directory listings, as well as this script itself */
	if( $f == '.' || $f == '..' || $f == basename(__FILE__) ) continue;

	/* ignore anything not matching the defined extention */
	if( pathinfo( $f, PATHINFO_EXTENSION ) !== $ext ) continue;

	/* inform user */
	IO::o( 'Reading '.$f );

	/* file contents and file name arrays */
	$files[]     = file_get_contents( $root.$f );
	$filesName[] = $f;

}

if( sizeof( $filesName ) === 0 )
{
	IO::eL();
	IO::done( 'No files found matching "' . $ext . '" extention...' );
}

/* end console output list */
IO::eL();


$allMatches = array();
foreach( $files as $i => $f )
{

	$matches = array();
	preg_match_all( '/&#x[^;]*?;/', $f, $matches );
	$allMatches[] = $matches;

}

$toConvert = array();
$notToConvert = array();
$toConvertTo = array();
$totalCount = 0;
$totalCountDone = 0;

IO::sL( 'Hexadecimal HTML entity instances found in files:' );

foreach( $allMatches as $i => $m )
{
	if( !isset( $m[0] ) || !is_array( $m[0] ) || !( sizeof( $m[0] ) > 0 ) ) continue;
	//IO::o( 'Matches in '.$filesName[$i] );

	$currentMatches = $m[0];
	for( $j=0; $j<sizeof( $currentMatches ); $j++ )
	{
		if( in_array( $currentMatches[$j], $ignore ) )
		{
				$notToConvert[] = $currentMatches[$j];
				continue;
		}

		$totalCount++;

		if( !in_array( $currentMatches[$j], $toConvert ) )
		{
			$toConvert[] = $currentMatches[$j];
			$hex = substr( $currentMatches[$j], 2 );
			$hex = substr( $hex, 0, strlen( $hex ) - 1 );
			$hex = '&#'.hexdec( $hex ).';';
			$toConvertTo[] = $hex;
			IO::o( 
				'Entity ' . 
				'%R' . str_pad( $currentMatches[$j], 9, ' ', STR_PAD_LEFT  ) . '%n ' . 
				'%K[ %w' . html_entity_decode( $hex                ) . '%K ]%W ---> %n' . 
				'%G' . str_pad( $hex,                9, ' ', STR_PAD_LEFT ) . '%n ' . 
				'%K[ %W' . html_entity_decode( $currentMatches[$j] ) . '%K ]'
			);
		}
	}
}

IO::eL();

if( sizeof($allMatches[0][0]) === 0 )
{
	IO::o( 'No entities were found...' );
}

if( sizeof($notToConvert) !== 0 ) { IO::sL( 'Instances ignored:' ); }
foreach( $notToConvert as $i => $v ) { IO::o( 'Ignoring '.$v ); }
if( sizeof($notToConvert) !== 0 ) { IO::eL(); }

for( $i = 0; $i < sizeof( $files ); $i++ )
{

	foreach( $toConvert as $j => $hex )
	{

		$count = 0;
		$files[$i] = str_replace( $hex, $toConvertTo[$j], $files[$i], $count );
		$totalCountDone = $totalCountDone + $count;

	}

}

IO::info( 'Instances found/converted: %W'.$totalCount.'%w/%W'.$totalCountDone );

if( $totalCount > 0 )
{

	if( IO::askBool( 'Create a backup of your pre-conversion files?', IO::AskYes ) === true )
	{

		if( is_writable( $root ) )
		{

			if( is_dir( $backup ) ) 
			{
				IO::info( 'Removing previously backuped up files...' );
				foreach( scandir( $backup ) as $item )
				{
					if( $item === '.' || $item === '..' ) continue;
					unlink( $backup . $item );
				}
				rmdir( $backup ); 
			}


			IO::sL( 'Using backup directory ' . $backup );
			mkdir( $backup );

			foreach( $filesName as $i => $f )
			{
				IO::o( 'Backing up ' . $f );
				file_put_contents( $backup . $f, file_get_contents( $root . $f ) );
			}

			IO::eL();
			IO::info( 'Backup completed...' );

		}
		else
		{
			IO::warn( 'Directory not writable! Files not backed up; proceed with care!' );
		}

		$nextQuestion = IO::AskYes;

	}
	else
	{

		$nextQuestion = IO::AskNo;
		IO::warn( 'Not creating backups of your files; proceed with care!' );

	}

	if( IO::askBool( 'Write changes to disk?', $nextQuestion ) === false )
	{
		IO::done( 'Not writing changes to disk...' );
	}

	IO::sL( 'Writing changes to disk...' );
	$writeError = false;
	foreach( $filesName as $i => $fn )
	{

		$toPut = $files[$i];
		if( ( $bytes = file_put_contents( $root.$fn, $toPut ) ) === false )
		{
			IO::warn( 'Count not write to '.$fn );
		}
		else
		{
			IO::o( 'Wrote ' . $bytes . ' bytes to '.$fn );
		}

	}
	IO::eL();

	if( $writeError === false )
	{
		IO::oA( 'Wrote out new files successfully!');
	}
	else
	{
		IO::warn( 'An error was encountered while writing to one or more files...' );
	}

}
else
{

	IO::oA( 'Nothing found to convert...' );

}

IO::done( 'All done; goodbye...' );
exit( 0 );
?>