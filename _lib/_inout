<?php

require '/scripts/_lib/_inoutColor';

interface InOut_Interface {}

abstract class InOut_Abstract implements InOut_Interface 
{

	const Level_Notice   = 0;
	const Level_Warning  = 10;
	const Level_Ask      = 20;
	const Level_Error    = 100;
	const Level_Critical = 101;

	const Level_Title    = 500;
	const Level_Author   = 501;
	const Level_H1       = 510;

	const Level_Status     = 800;
	const Level_StatusGood = 810;
	const Level_StatusBad  = 820;

	protected $_count         = 0;
	protected $_debug         = false;
	protected $_color         = true;
	protected $_ConsoleColor  = null;
	protected $_template_pre  = '[ %TIMECOUNT% %SELF% ]  %SEP%  ';
	protected $_template_main = '%MAIN%';
	protected $_template_post = '%END%';

	public function __construct( $debug = false, $color = true, $ConsoleColor = null )
	{
		$this->setDebug( $debug );
		$this->setColor( $color );
		if( ! $ConsoleColor instanceof Console_Color2 ) $ConsoleColor = new Console_Color2();
		$this->setConsoleColor( $ConsoleColor );
	}

	public function setDebug( $debug )
	{
		$this->_debug = (boolean)$debug;
	}

	public function getDebug()
	{
		return (boolean)$this->_debug;
	}

	public function setCount( $count )
	{
		$this->_count = (int)$count;
	}

	public function getCount()
	{
		return (int)$this->_count;
	}

	public function addCount( $add = 1 )
	{
		$this->setCount( $this->getCount() + $add );
	}

	public function setColor( $color )
	{
		$this->_color = (boolean)$color;
	}

	public function getColor()
	{
		return (boolean)$this->_color;
	}

	public function setConsoleColor( Console_Color2 $ConsoleColor )
	{
		$this->_ConsoleColor = (object)$ConsoleColor;
	}

	public function getConsoleColor()
	{
		return (object)$this->_ConsoleColor;
	}

	public function title( $message )
	{
		$this->put( $message, self::Level_Title );
	}

	public function author( $message )
	{
		$this->put( $message, self::Level_Author );
	}

	public function h1( $message )
	{
		$this->put( $message, self::Level_H1 );
	}

	public function status( $message )
	{
		$this->put( $message . '...', self::Level_Status, '' );
	}

	public function status_good( $message = 'Ok' )
	{
		$this->put( $message, self::Level_StatusGood, "\n", true );
	}

	public function status_bad( $message = 'Error' )
	{
		$this->put( $message, self::Level_StatusBad, "\n", true );
	}

	abstract public function put( $message, $level = self::Level_Notice, $post = "\n" );

}

class InOut extends InOut_Abstract
{

	public function put( $message, $level = self::Level_Notice, $post = "\n", $nopre = false )
	{

		$out = '';

		if( $nopre === false )
		{
			$out = $this->_buildPre( $message, $level, $post );
		}

		$out = $out . $this->_buildMain( $message, $level, $post );
		$out = $out . $this->_buildPost( $message, $level, $post );

		if( $this->getColor() === true )
		{
			$out = $this->getConsoleColor()->convert( $out );
		}
		else
		{
			$out = $this->getConsoleColor()->strip( $out );
		}

		fputs( STDOUT, $out );
		$this->addCount();
		
	}

	protected function _buildPre( $message, $level, $post )
	{
		switch( $level )
		{
			case self::Level_Title:
			case self::Level_Author:
				$sep = '%W[====]';
				break;
			case self::Level_H1:
				$sep = '%m[%M----%m]';
				break;
			case self::Level_Notice:
			default:
				$sep = '%K[%w -- %K]';
				break;
		}
		$sep = $sep . '%n';

		$timecount = @date( 'is' ) . '.' . str_pad( $this->getCount(), 4, 0, STR_PAD_LEFT );
		$self = basename( __FILE__ );

		$out = str_replace( '%TIMECOUNT%', $timecount, $this->_template_pre );
		$out = str_replace( '%SELF%', $self, $out );
		$out = str_replace( '%SEP%', $sep, $out );
		$out = '%K' . $out . '%n';
		return $out;
	}

	protected function _buildMain( $message, $level, $post )
	{
		switch( $level )
		{
			case self::Level_Title:
			case self::Level_Author:
				$message = '%W' . strtoupper( $message );
				break;
			case self::Level_H1:
				$message = '%M' . $message;
				break;
			case self::Level_StatusGood:
				$message = '%G' . $message;
			case self::Level_StatusBad:
				$message = '%R' . $message;
			case self::Level_Notice:
			default:
				$message = '%w' . $message;
		}
		$message = $message . '%n';

		$out = str_replace( '%MAIN%', $message, $this->_template_main );
		return $out;
	}

	protected function _buildPost( $message, $level, $post )
	{
		$out = str_replace( '%END%', $post, $this->_template_post );
		return $out;
	}

}

$IO = new InOut();

$IO->title( 'Testing new input/output php class' );
$IO->author( 'By Rob Frawley of Scribe Inc.' );
$IO->put( 'This is a reqular line' );
$IO->h1( 'Running sanity checks on enviornment' );
$IO->status( 'Doing something' );
$IO->status_good();
?>